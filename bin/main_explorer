#!/bin/bash

#Script main exploration -> A FAIRE $1 $2 

#Declare constants value of conflict
NON_EXISTANCE=1
TYPE=2

#Exit code
INVALID_NUMBER_OF_ARGUMENTS=1

#absolut path to the project
root_path=""

if [ $# -ne 2 ]
then
        echo -e "Invalid number of arguments\n You need to use $0 treeA treeB"
        exit $INVALID_NUMBER_OF_ARGUMENTS
fi

#Compare the two file that we explore
${root_path}bin/dir_comparator "$1" "$2" $3

#Saving in one array all the element of the FileA
declare -a contained_element_A
elementsA=$(ls $1)
for element in $elementsA
do
        contained_element_A[${#contained_element_A[@]}]="$element"
done

#Saving in one array all the element of the FileB
declare -a contained_element_B
elementsB=$(ls $2)
for element in $elementsB
do
        contained_element_B[${#contained_element_B[@]}]="$element"
done

#Finding equivalence between contained_element_A and contained_element_B
declare -a contained_files
declare -a contained_dir
iteratorA=0
iteratorB=0
iteratorFiles=0
IteratorDir=0
flag=1

while [ $flag -ne 0 ]
do
	#If A and B are emty or at their end
	if [ ${#contained_element_A[@]} -eq 0 -a ${#contained_element_B[@]} -eq 0 ] || [ $iteratorA -eq ${#contained_element_A[@]} -a $iteratorB -eq ${#contained_element_B[@]} ] && [ $flag -ne 0 ]  
	then
		flag=0
	#If A is empty or at its end and not B, looping on B for non-existente element
	elif [ ${#contained_element_A[@]} -eq 0 -o $iteratorA -eq ${#contained_element_A[@]} ] && [ $iteratorB -lt ${#contained_element_B[@]} ] && [ $flag -ne 0 ]
	then
		while [ $iteratorB -lt ${#contained_element_B[@]} ]
		do
			element_B=${contained_element_B[$iteratorB]}
			${root_path}bin/conflict/conflict_manager $NON_EXISTANCE $3 "$2/$element_B" "$1/$element_B"
                        iteratorB=$((iteratorB+=1))
		done
		flag=0
        #If B is empty or at its end and not A , looping on A for non-existente element
	elif [ ${#contained_element_B[@]} -eq 0 -o $iteratorB -eq ${#contained_element_B[@]} ] && [ $iteratorA -lt ${#contained_element_A[@]} ] && [ $flag -ne 0 ]
	then
		flag=3
		while [ $iteratorA -lt ${#contained_element_A[@]} ] 
		do
	                element_A=${contained_element_A[$iteratorA]}
                        ${root_path}bin/conflict/conflict_manager $NON_EXISTANCE $3 "$1/$element_A" "$2/$element_A"
                        iteratorA=$((iteratorA+=1))
		done
		flag=0
	#Normal compare
	else
		element_A=${contained_element_A[$iteratorA]}
	        element_B=${contained_element_B[$iteratorB]}

        	#If A and B are not the same
        	#Nonexistence conflict
        	if [[ "$element_A" != "$element_B" ]]
        	then
                	#ElementA do not exist in branch B
                	if [[ "$element_A" < "$element_B" ]]
                	then
                        	${root_path}bin/conflict/conflict_manager $NON_EXISTANCE $3 "$1/$element_A" "$2/$element_A"
                        	iteratorA=$((iteratorA+=1))
                	#ElementB do not exist in branch A
                	else
                        	${root_path}bin/conflict/conflict_manager $NON_EXISTANCE $3 "$2/$element_B" "$1/$element_B"
                        	iteratorB=$((iteratorB+=1))
                	fi
        	#We do some tests about the type
        	else
                	#file and file
                	if [ -f "$1/$element_A" -a -f "$2/$element_B" ]
                	then
                        	contained_files[$iteratorFiles]=$element_A
                        	iteratorFiles=$((iteratorFiles+=1))
                	fi
                	#dir and dir
                	if [ -d "$1/$element_A" -a -d "$2/$element_B" ]
                	then
                        	contained_dir[$iteratorDir]=$element_A
                        	iteratorDir=$((iteratorDir+=1))
                	fi
                
			#conflict dir/file or file/dir
                	if [ -d "$1/$element_A" -a -f "$2/$element_B" ] || [ -f "$1/$element_A" -a -d "$2/$element_B" ]
                	then
                        	#Type nconflict
                        	${root_path}bin/conflict/conflict_manager $TYPE $3 "$1/$element_A" "$2/$element_B"
                	fi

                	iteratorA=$((iteratorA+=1))
                	iteratorB=$((iteratorB+=1))
        	fi
	fi
done

#Comparaison on all files
for file in ${contained_files[@]}
do
	${root_path}bin/file_comparator "$1/$file" "$2/$file" 0
done

#Exploration of the other directorys
for dir in ${contained_dir[@]}
do
        ${root_path}bin/main_explorer "$1/$dir" "$2/$dir" $3
done

exit 0
