#!/bin/bash

#Script main exploration -> A FAIRE $1 $2 $3 = mode

#Declare constants value of conflict
NON_EXISTANCE=1
TYPE=2

#Exit code
INVALID_NUMBER_OF_ARGUMENTS=1


if [ $# -ne 3 ]
then
        echo -e "Invalid number of arguments\n You need to use $0 treeA treeB log"
        exit $INVALID_NUMBER_OF_ARGUMENTS
fi

#Compare the two file that we explore
bin/dir_comparator "$1" "$2" $3


#Saving in one array all the element of the FileA
declare -a contained_element_A
elementsA=$(ls $1)
iterator=0
for element in $elementsA
do
        contained_element_A[$iterator]="$element"
	iterator=$((iterator+=1))
done
contained_element_A[${#contained_element_A[@]}]=" "

#Saving in one array all the element of the FileB
declare -a contained_element_B
elementsB=$(ls $2)
iterator=0
for element in $elementsB
do
        contained_element_B[$iterator]="$element"
	iterator=$((iterator+=1))
done
contained_element_B[${#contained_element_B[@]}]=" "

#Finding equivalence between contained_element_A and contained_element_B
declare -a contained_files
declare -a contained_dir
iteratorA=0
iteratorB=0
iteratorFiles=0
IteratorDir=0
stop=1

while [ $stop -eq 1 ] 
do
	element_A=${contained_element_A[$iteratorA]}
	element_B=${contained_element_B[$iteratorB]}
	
	#If A and B are not the same
        #Nonexistence conflict
        if [[ "$element_A" != "$element_B" ]]
        then
		echo probleme
	      	echo A: $1/$element_A 
		echo B: $2/$element_B
		#ElementA do not exist in branch B
		if [[ "$element_A" < "$element_B" ]]
		then
			bin/conflict/conflict_manager $NON_EXISTANCE $3 "$1/$element_A" "$2/$element_A"
			iteratorA=$((iteratorA+=1))
		#ElementB do not exist in branch A
		else
			bin/conflict/conflict_manager $NON_EXISTANCE $3 "$2/$element_B" "$1/$element_B"
			iteratorB=$((iteratorB+=1))
		fi	
	#We do some tests about the type
	else
		#file and file
		if [ -f "$1/$element_A" -a -f "$2/$element_B" ]
		then
			contained_files[$iteratorFiles]=$element_A
			iteratorFiles=$((iteratorFiles+=1))
		fi

		#dir and dir
		if [ -d "$1/$element_A" -a -d "$2/$element_B" ]
                then
			contained_dir[$iteratorDir]=$element_A
			iteratorDir=$((iteratorDir+=1))
                fi

		#conflict dir/file or file/dir
		if [ -d "$1/$element_A" -a -f "$2/$element_B" ] || [ -f "$1/$element_A" -a -d "$2/$element_B" ]
		then
			#Type nconflict
			bin/conflict/conflict_manager $TYPE $3 "$1/$element_A" "$2/$element_B"
		fi

		iteratorA=$((iteratorA+=1))
		iteratorB=$((iteratorB+=1))
	fi
	
	#Exiting from the loop
	if [ $iteratorA -ge ${#contained_element_A[@]} ] && [ $iteratorB -ge ${#contained_element_B[@]} ]
	then
		stop=0
	fi

done

#Comparaison on all files
for file in ${contained_files[@]}
do
	echo files :
	echo "$1/$file"
	echo "$2/$file"
	bin/file_comparator "$1/$file" "$2/$file" 0
done

#Exploration of the other directorys
for dir in ${contained_dir[@]}
do
	echo dossiers : 
        echo "$1/$dir"
        echo "$2/$dir"
        bin/main_explorer "$1/$dir" "$2/$dir" $3
done

exit 0
